name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run vet
      run: go vet ./...
      
    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        
    - name: Display coverage summary
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}')
        echo "Test Coverage: ${COVERAGE}"
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** ${COVERAGE}" >> $GITHUB_STEP_SUMMARY

    # ⭐️ New step to upload the coverage report
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        # The token is read from GitHub secrets
        token: ${{ secrets.CODECOV_TOKEN }}
        # Specify the coverage file generated in the previous step
        files: ./coverage.out
        # Optional: set a flag name for the report
        flags: unittests
        codecov_yml_path: ./.codecov.yml
      # This ensures the step runs even if tests fail, allowing Codecov to report the drop
      if: always()

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out results.sarif ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success'
      run: |
        echo "✅ CI checks passed successfully!"
        
    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ One or more CI checks failed:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Security: ${{ needs.security.result }}"
        exit 1